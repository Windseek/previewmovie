{"version":3,"sources":["../../src/async/async.js"],"names":["readAsync","data","console","log","JSON","parse","init","getContent","fs","require","readFile","err","util","promisify","then","catch","co","fetch","res","json","movie"],"mappings":";;AAsCA;;;;uEAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqBA,UAAU,gBAAV,CADrB;;AAAA;AACQC,4BADR;;AAEIC,gCAAQC,GAAR,CAAYC,KAAKC,KAAL,CAAWJ,IAAX,CAAZ;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,I;;;;;;;mDAVLC,U;;AA/BV;;;AAGA,IAAMC,KAAKC,QAAQ,IAAR,CAAX;;AAEAD,GAAGE,QAAH,CAAY,gBAAZ,EAA8B,UAACC,GAAD,EAAMV,IAAN,EAAa;AACvCC,YAAQC,GAAR,CAAYF,IAAZ;AACA,WAAOG,KAAKC,KAAL,CAAWJ,IAAX,CAAP;AACH,CAHD;;AAKA;;;AAGA,IAAMW,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMT,YAAYY,KAAKC,SAAL,CAAeL,GAAGE,QAAlB,CAAlB;;AAEAV,UAAU,gBAAV,EACKc,IADL,CACU,gBAAQ;AACVZ,YAAQC,GAAR,CAAYF,IAAZ;AACA,WAAOG,KAAKC,KAAL,CAAWJ,IAAX,CAAP;AACH,CAJL,EAKKc,KALL,CAKW,eAAO;AACVb,YAAQC,GAAR,CAAYQ,GAAZ;AACH,CAPL;;AASA;;;AAGA,IAAMK,KAAKP,QAAQ,IAAR,CAAX;AACA,IAAMQ,QAAQR,QAAQ,YAAR,CAAd;;AAEA,SAAUF,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACoBU,MAAM,oCAAN,CADpB;;AAAA;AACQC,uBADR;AAAA;AAAA,2BAEsBA,IAAIC,IAAJ,EAFtB;;AAAA;AAEQC,yBAFR;;AAGIlB,4BAAQC,GAAR,CAAYiB,KAAZ;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKAJ,GAAGT,UAAH;AASAD;;AAEA","file":"async.js","sourcesContent":["/** \n * 传统的回调模式\n*/\nconst fs = require('fs');\n\nfs.readFile('./package.json', (err, data)=>{\n    console.log(data)\n    return JSON.parse(data);\n})\n\n/**\n *  promise 模式\n*/\nconst util = require('util');\nconst readAsync = util.promisify(fs.readFile)\n\nreadAsync('./package.json')\n    .then(data => {\n        console.log(data)\n        return JSON.parse(data);\n    })\n    .catch(err => {\n        console.log(err);\n    })\n\n/** \n * co 模式\n*/   \nconst co = require('co');\nconst fetch = require('node-fetch');\n\nfunction *getContent() {\n    let res = yield fetch('https://api.apiopen.top/todayVideo');\n    let movie = yield res.json();\n    console.log(movie);\n}\nco(getContent);\n\n/** \n * async await 模式\n*/\nasync function init() {\n    let data = await readAsync('./package.json');\n    console.log(JSON.parse(data));\n}\ninit();\n\n/** \n * anync await 模式是co的语法糖，\n * co库利用generator方法，yield指令，next传参，实现自动化执行\n * 利用promise实现每步执行都返回一个promise对象\n * co库的执行，yield语句后面全是promise对象，通过.then().then()....进行链式操作\n * async await await后可以传是符串，数字，当是字符串和数字的时候其实是同步进行的，co操作没有同步，不支持字符串和数字\n * async await 更适合异步请求的业务场景，co库除了异步场景还有自动化流程处理等潜在作用\n*/\n"]}