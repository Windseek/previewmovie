{"version":3,"sources":["../../src/async/wind-thrunk.js"],"names":["gen","thunkify","fn","args","Array","from","arguments","callback","called","proxyCallBack","apply","wholeArgs","err","demo","arg","next","console","log","fnThunk","run","g","genInstance","res","done","value"],"mappings":";;mDA+BWA,G;;;;AA/BX,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AAClB,WAAO,YAAY;AACf,YAAIC,OAAOC,MAAMC,IAAN,CAAWC,SAAX,CAAX;AACA,eAAO,UAAUC,QAAV,EAAoB;AACvB,gBAAIC,eAAJ;AACA,gBAAIC,gBAAgB,SAAhBA,aAAgB,GAAY;AAC5B,oBAAID,MAAJ,EAAY;AACR;AACH;AACDA,yBAAS,IAAT;AACAD,yBAASG,KAAT,CAAe,IAAf,EAAqBN,MAAMC,IAAN,CAAWC,SAAX,CAArB;AACH,aAND;AAOA,gBAAIK,yCAAgBR,IAAhB,IAAsBM,aAAtB,EAAJ;AACA,gBAAI;AACA,uBAAOP,GAAGQ,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACH,aAFD,CAGA,OAAOC,GAAP,EAAY;AACRL,yBAASK,GAAT;AACH;AACJ,SAhBD;AAiBH,KAnBD;AAoBH;;AAED,SAASC,IAAT,CAAcC,GAAd,EAAkBC,IAAlB,EAAuB;AACnBC,YAAQC,GAAR,CAAY,SAAOH,GAAP,GAAW,OAAvB;AACAC;AACH;;AAED,IAAIG,UAAUjB,SAASY,IAAT,CAAd;;AAEA;AACA,SAAWb,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACUkB,QAAQ,CAAR,CADV;;AAAA;AAAA;AAAA,2BAEUA,QAAQ,CAAR,CAFV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;AACA,SAASC,GAAT,CAAaC,CAAb,EAAe;AACX,QAAIC,cAAcD,GAAlB;AACA,QAAIL,OAAO,SAAPA,IAAO,GAAU;AACjB,YAAIO,MAAMD,YAAYN,IAAZ,EAAV;AACA,YAAG,CAACO,GAAD,IAAQA,IAAIC,IAAf,EAAqB;AACrB;AACAD,YAAIE,KAAJ,CAAUT,IAAV;AACH,KALD;AAMAA;AACH;;AAEDI,IAAInB,GAAJ","file":"wind-thrunk.js","sourcesContent":["function thunkify(fn) {\n    return function () {\n        let args = Array.from(arguments);\n        return function (callback) {\n            let called;\n            let proxyCallBack = function () {\n                if (called) {\n                    return;\n                }\n                called = true;\n                callback.apply(null, Array.from(arguments));\n            }\n            let wholeArgs = [...args, proxyCallBack];\n            try {\n                return fn.apply(this, wholeArgs);\n            }\n            catch (err) {\n                callback(err);\n            }\n        }\n    }\n}\n\nfunction demo(arg,next){\n    console.log(\"demo\"+arg+\" done\");\n    next();\n}\n\nlet fnThunk = thunkify(demo);\n\n//执行器生产函数\nfunction * gen(){\n    yield fnThunk(1);\n    yield fnThunk(2);\n}\n\n//执行器\nfunction run(g){\n    let genInstance = g();\n    let next = function(){\n        let res = genInstance.next();\n        if(!res || res.done) return;\n        //next 就是res.value的callback回调函数，当res.value执行完之后会进入next，从而进入下个yield\n        res.value(next);\n    };\n    next();\n}\n\nrun(gen);"]}